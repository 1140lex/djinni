# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from listeners.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files


from abc import ABCMeta, abstractmethod
from future.utils import with_metaclass
from java_only_listener import JavaOnlyListener
from java_only_listener import JavaOnlyListenerHelper
from objc_only_listener import ObjcOnlyListener
from objc_only_listener import ObjcOnlyListenerHelper
from py_only_listener import PyOnlyListener
from py_only_listener import PyOnlyListenerHelper
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

class UsesSingleLanguageListeners(with_metaclass(ABCMeta)):
    """
     Generating and compiling this makes sure other languages don't break
     on references to interfaces they don't need.
    """

    @abstractmethod
    def callForObjC(self, l):
        raise NotImplementedError

    @abstractmethod
    def callForJava(self, l):
        raise NotImplementedError

    @abstractmethod
    def callForPy(self, l):
        raise NotImplementedError


class UsesSingleLanguageListenersCppProxy(UsesSingleLanguageListeners):
    def __init__(self, proxy):
        self._is_cpp_proxy = True
        self._cpp_impl = proxy
    def __del__(self):
        if not lib:
            return
        lib.uses_single_language_listeners___wrapper_dec_ref(self._cpp_impl)

    def callForObjC(self, l):
        lib.cw__uses_single_language_listeners_callForObjC(self._cpp_impl, ObjcOnlyListenerHelper.fromPy(l))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    def callForJava(self, l):
        lib.cw__uses_single_language_listeners_callForJava(self._cpp_impl, JavaOnlyListenerHelper.fromPy(l))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    def callForPy(self, l):
        lib.cw__uses_single_language_listeners_callForPy(self._cpp_impl, PyOnlyListenerHelper.fromPy(l))
        CPyException.toPyCheckAndRaise(ffi.NULL)

class UsesSingleLanguageListenersCallbacksHelper():
    @ffi.callback("void(struct DjinniObjectHandle * , struct DjinniWrapperObjcOnlyListener *)")
    def callForObjC(cself, l):
        try:
            UsesSingleLanguageListenersHelper.selfToPy(cself).callForObjC(ObjcOnlyListenerHelper.toPy(l))
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)

    @ffi.callback("void(struct DjinniObjectHandle * , struct DjinniWrapperJavaOnlyListener *)")
    def callForJava(cself, l):
        try:
            UsesSingleLanguageListenersHelper.selfToPy(cself).callForJava(JavaOnlyListenerHelper.toPy(l))
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)

    @ffi.callback("void(struct DjinniObjectHandle * , struct DjinniWrapperPyOnlyListener *)")
    def callForPy(cself, l):
        try:
            UsesSingleLanguageListenersHelper.selfToPy(cself).callForPy(PyOnlyListenerHelper.toPy(l))
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)

    @ffi.callback("void(struct DjinniObjectHandle * )")
    def __delete(c_ptr):
        assert c_ptr in UsesSingleLanguageListenersHelper.c_data_set
        UsesSingleLanguageListenersHelper.c_data_set.remove(c_ptr)

    @staticmethod
    def _add_callbacks():
        lib.uses_single_language_listeners_add_callback_callForObjC(UsesSingleLanguageListenersCallbacksHelper.callForObjC)
        lib.uses_single_language_listeners_add_callback_callForJava(UsesSingleLanguageListenersCallbacksHelper.callForJava)
        lib.uses_single_language_listeners_add_callback_callForPy(UsesSingleLanguageListenersCallbacksHelper.callForPy)

        lib.uses_single_language_listeners_add_callback___delete(UsesSingleLanguageListenersCallbacksHelper.__delete)

UsesSingleLanguageListenersCallbacksHelper._add_callbacks()

class UsesSingleLanguageListenersHelper:
    c_data_set = MultiSet()
    @staticmethod
    def toPy(obj):
        if obj == ffi.NULL:
            return None
        # Python Objects can be returned without being wrapped in proxies
        py_handle = lib.get_handle_from_proxy_object_cw__uses_single_language_listeners(obj)
        if py_handle:
            assert py_handle in UsesSingleLanguageListenersHelper.c_data_set
            aux = ffi.from_handle(ffi.cast("void * ", py_handle))
            lib.uses_single_language_listeners___wrapper_dec_ref(obj)
            return aux
        return UsesSingleLanguageListenersCppProxy(obj)

    @staticmethod
    def selfToPy(obj):
        assert obj in UsesSingleLanguageListenersHelper.c_data_set
        return ffi.from_handle(ffi.cast("void * ",obj))

    @staticmethod
    def fromPy(py_obj):
        if py_obj is None:
            return ffi.NULL
        if isinstance(py_obj, UsesSingleLanguageListenersCppProxy):
            lib.uses_single_language_listeners___wrapper_add_ref(py_obj._cpp_impl)
            return py_obj._cpp_impl

        py_proxy = (py_obj)
        if not hasattr(py_obj, "callForObjC"):
            raise TypeError
        if not hasattr(py_obj, "callForJava"):
            raise TypeError
        if not hasattr(py_obj, "callForPy"):
            raise TypeError

        bare_c_ptr = ffi.new_handle(py_proxy)
        UsesSingleLanguageListenersHelper.c_data_set.add(bare_c_ptr)
        wrapped_c_ptr = lib.make_proxy_object_from_handle_cw__uses_single_language_listeners(bare_c_ptr)
        return wrapped_c_ptr
