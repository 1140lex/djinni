# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from interface_nullity.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files


from abc import ABCMeta, abstractmethod
from future.utils import with_metaclass
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

class DummyInterface(with_metaclass(ABCMeta)):
    """ Used to pass around in tests that check nullity """


class DummyInterfaceCppProxy(DummyInterface):
    def __init__(self, proxy):
        self._is_cpp_proxy = True
        self._cpp_impl = proxy
    def __del__(self):
        if not lib:
            return
        lib.dummy_interface___wrapper_dec_ref(self._cpp_impl)

class DummyInterfaceCallbacksHelper():
    @ffi.callback("void(struct DjinniObjectHandle * )")
    def __delete(c_ptr):
        assert c_ptr in DummyInterfaceHelper.c_data_set
        DummyInterfaceHelper.c_data_set.remove(c_ptr)

    @staticmethod
    def _add_callbacks():

        lib.dummy_interface_add_callback___delete(DummyInterfaceCallbacksHelper.__delete)

DummyInterfaceCallbacksHelper._add_callbacks()

class DummyInterfaceHelper:
    c_data_set = MultiSet()
    @staticmethod
    def toPy(obj):
        if obj == ffi.NULL:
            return None
        # Python Objects can be returned without being wrapped in proxies
        py_handle = lib.get_handle_from_proxy_object_cw__dummy_interface(obj)
        if py_handle:
            assert py_handle in DummyInterfaceHelper.c_data_set
            aux = ffi.from_handle(ffi.cast("void * ", py_handle))
            lib.dummy_interface___wrapper_dec_ref(obj)
            return aux
        return DummyInterfaceCppProxy(obj)

    @staticmethod
    def selfToPy(obj):
        assert obj in DummyInterfaceHelper.c_data_set
        return ffi.from_handle(ffi.cast("void * ",obj))

    @staticmethod
    def fromPy(py_obj):
        if py_obj is None:
            return ffi.NULL
        if isinstance(py_obj, DummyInterfaceCppProxy):
            lib.dummy_interface___wrapper_add_ref(py_obj._cpp_impl)
            return py_obj._cpp_impl

        py_proxy = (py_obj)

        bare_c_ptr = ffi.new_handle(py_proxy)
        DummyInterfaceHelper.c_data_set.add(bare_c_ptr)
        wrapped_c_ptr = lib.make_proxy_object_from_handle_cw__dummy_interface(bare_c_ptr)
        return wrapped_c_ptr
