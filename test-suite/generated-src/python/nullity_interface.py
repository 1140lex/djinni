# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from interface_nullity.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyPrimitive

from abc import ABCMeta, abstractmethod
from dummy_interface import DummyInterface
from dummy_interface import DummyInterfaceHelper
from future.utils import with_metaclass
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

class NullityInterface(with_metaclass(ABCMeta)):
    @abstractmethod
    def non_null_parameters(self, p1, p2):
        raise NotImplementedError

    @abstractmethod
    def non_null_return(self, should_return_null):
        raise NotImplementedError

    @abstractmethod
    def nullable_parameters(self, p1, p2):
        raise NotImplementedError

    @abstractmethod
    def nullable_return(self, should_return_null):
        raise NotImplementedError


class NullityInterfaceCppProxy(NullityInterface):
    def __init__(self, proxy):
        self._is_cpp_proxy = True
        self._cpp_impl = proxy
    def __del__(self):
        if not lib:
            return
        lib.nullity_interface___wrapper_dec_ref(self._cpp_impl)

    def non_null_parameters(self, p1, p2):
        lib.cw__nullity_interface_non_null_parameters(self._cpp_impl, DummyInterfaceHelper.fromPy(p1), DummyInterfaceHelper.fromPy(p2))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    def non_null_return(self, should_return_null):
        _ret_c = lib.cw__nullity_interface_non_null_return(self._cpp_impl, CPyPrimitive.fromPy(should_return_null))
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = DummyInterfaceHelper.toPy(_ret_c)
        assert _ret is not None
        return _ret

    def nullable_parameters(self, p1, p2):
        lib.cw__nullity_interface_nullable_parameters(self._cpp_impl, DummyInterfaceHelper.fromPy(p1), DummyInterfaceHelper.fromPy(p2))
        CPyException.toPyCheckAndRaise(ffi.NULL)

    def nullable_return(self, should_return_null):
        _ret_c = lib.cw__nullity_interface_nullable_return(self._cpp_impl, CPyPrimitive.fromPy(should_return_null))
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = DummyInterfaceHelper.toPy(_ret_c)
        return _ret

class NullityInterfaceCallbacksHelper():
    @ffi.callback("void(struct DjinniObjectHandle * , struct DjinniWrapperDummyInterface *, struct DjinniWrapperDummyInterface *)")
    def non_null_parameters(cself, p1, p2):
        try:
            NullityInterfaceHelper.selfToPy(cself).non_null_parameters(DummyInterfaceHelper.toPy(p1), DummyInterfaceHelper.toPy(p2))
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)

    @ffi.callback("struct DjinniWrapperDummyInterface *(struct DjinniObjectHandle * , bool)")
    def non_null_return(cself, should_return_null):
        try:
            _ret = DummyInterfaceHelper.fromPy(NullityInterfaceHelper.selfToPy(cself).non_null_return(CPyPrimitive.toPy(should_return_null)))
            assert _ret != ffi.NULL
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("void(struct DjinniObjectHandle * , struct DjinniWrapperDummyInterface *, struct DjinniWrapperDummyInterface *)")
    def nullable_parameters(cself, p1, p2):
        try:
            NullityInterfaceHelper.selfToPy(cself).nullable_parameters(DummyInterfaceHelper.toPy(p1), DummyInterfaceHelper.toPy(p2))
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)

    @ffi.callback("struct DjinniWrapperDummyInterface *(struct DjinniObjectHandle * , bool)")
    def nullable_return(cself, should_return_null):
        try:
            return DummyInterfaceHelper.fromPy(NullityInterfaceHelper.selfToPy(cself).nullable_return(CPyPrimitive.toPy(should_return_null)))
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("void(struct DjinniObjectHandle * )")
    def __delete(c_ptr):
        assert c_ptr in NullityInterfaceHelper.c_data_set
        NullityInterfaceHelper.c_data_set.remove(c_ptr)

    @staticmethod
    def _add_callbacks():
        lib.nullity_interface_add_callback_non_null_parameters(NullityInterfaceCallbacksHelper.non_null_parameters)
        lib.nullity_interface_add_callback_non_null_return(NullityInterfaceCallbacksHelper.non_null_return)
        lib.nullity_interface_add_callback_nullable_parameters(NullityInterfaceCallbacksHelper.nullable_parameters)
        lib.nullity_interface_add_callback_nullable_return(NullityInterfaceCallbacksHelper.nullable_return)

        lib.nullity_interface_add_callback___delete(NullityInterfaceCallbacksHelper.__delete)

NullityInterfaceCallbacksHelper._add_callbacks()

class NullityInterfaceHelper:
    c_data_set = MultiSet()
    @staticmethod
    def toPy(obj):
        if obj == ffi.NULL:
            return None
        # Python Objects can be returned without being wrapped in proxies
        py_handle = lib.get_handle_from_proxy_object_cw__nullity_interface(obj)
        if py_handle:
            assert py_handle in NullityInterfaceHelper.c_data_set
            aux = ffi.from_handle(ffi.cast("void * ", py_handle))
            lib.nullity_interface___wrapper_dec_ref(obj)
            return aux
        return NullityInterfaceCppProxy(obj)

    @staticmethod
    def selfToPy(obj):
        assert obj in NullityInterfaceHelper.c_data_set
        return ffi.from_handle(ffi.cast("void * ",obj))

    @staticmethod
    def fromPy(py_obj):
        if py_obj is None:
            return ffi.NULL
        if isinstance(py_obj, NullityInterfaceCppProxy):
            lib.nullity_interface___wrapper_add_ref(py_obj._cpp_impl)
            return py_obj._cpp_impl

        py_proxy = (py_obj)
        if not hasattr(py_obj, "non_null_parameters"):
            raise TypeError
        if not hasattr(py_obj, "non_null_return"):
            raise TypeError
        if not hasattr(py_obj, "nullable_parameters"):
            raise TypeError
        if not hasattr(py_obj, "nullable_return"):
            raise TypeError

        bare_c_ptr = ffi.new_handle(py_proxy)
        NullityInterfaceHelper.c_data_set.add(bare_c_ptr)
        wrapped_c_ptr = lib.make_proxy_object_from_handle_cw__nullity_interface(bare_c_ptr)
        return wrapped_c_ptr
