// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from interface_nullity.djinni

#include <iostream> // for debugging
#include <cassert>
#include "wrapper_marshal.hpp"
#include "nullity_interface.hpp"

#include "cw__dummy_interface.hpp"
#include "cw__nullity_interface.hpp"
#include <experimental/optional>

static void(*s_py_callback_nullity_interface_non_null_parameters)(DjinniObjectHandle * , DjinniWrapperDummyInterface *, DjinniWrapperDummyInterface *);
static DjinniWrapperDummyInterface *(*s_py_callback_nullity_interface_non_null_return)(DjinniObjectHandle * , bool);
static void(*s_py_callback_nullity_interface_nullable_parameters)(DjinniObjectHandle * , DjinniWrapperDummyInterface *, DjinniWrapperDummyInterface *);
static DjinniWrapperDummyInterface *(*s_py_callback_nullity_interface_nullable_return)(DjinniObjectHandle * , bool);
static void(*s_py_callback_nullity_interface___delete)(DjinniObjectHandle * );

std::shared_ptr<::testsuite::NullityInterface> DjinniWrapperNullityInterface::get(djinni::WrapperRef<DjinniWrapperNullityInterface> dw) {
    if (dw) {
        return dw->wrapped_obj;
    }
    return nullptr;
}

void nullity_interface___delete(DjinniObjectHandle * dh) {
    s_py_callback_nullity_interface___delete(dh);
}
void nullity_interface___wrapper_add_ref(DjinniWrapperNullityInterface * dh) {
    dh->ref_count.fetch_add(1);
}
void nullity_interface___wrapper_dec_ref(DjinniWrapperNullityInterface * dh) {
    const size_t ref = dh->ref_count.fetch_sub(1);
    if (ref == 1) {// value before sub is returned
        delete dh;
    }
}
djinni::Handle<DjinniWrapperNullityInterface> DjinniWrapperNullityInterface::wrap(std::shared_ptr<::testsuite::NullityInterface> obj) {
    if (obj) 
        return djinni::Handle<DjinniWrapperNullityInterface>(new DjinniWrapperNullityInterface{ std::move(obj) }, nullity_interface___wrapper_dec_ref);
    return nullptr;
}

DjinniWrapperNullityInterface *  make_proxy_object_from_handle_cw__nullity_interface(DjinniObjectHandle * c_ptr) {
    return new DjinniWrapperNullityInterface{std::make_shared<NullityInterfacePythonProxy>(c_ptr)};
}

DjinniObjectHandle * get_handle_from_proxy_object_cw__nullity_interface(DjinniWrapperNullityInterface * dw) {
    NullityInterfacePythonProxy * cast_ptr = dynamic_cast<NullityInterfacePythonProxy * >(dw->wrapped_obj.get());
    if (!cast_ptr) { return nullptr; }
    else return cast_ptr->get_m_py_obj_handle();
}

bool equal_handles_cw__nullity_interface(DjinniWrapperNullityInterface * dw1, DjinniWrapperNullityInterface * dw2) {
    return dw1->wrapped_obj == dw2->wrapped_obj;
}

DjinniObjectHandle * NullityInterfacePythonProxy::get_m_py_obj_handle() {
    return m_py_obj_handle;
}

NullityInterfacePythonProxy::NullityInterfacePythonProxy(DjinniObjectHandle * c_ptr) : m_py_obj_handle(c_ptr) {}

NullityInterfacePythonProxy::~NullityInterfacePythonProxy() {
    s_py_callback_nullity_interface___delete(m_py_obj_handle);
}

void nullity_interface_add_callback_non_null_parameters(void(* ptr)(DjinniObjectHandle * , DjinniWrapperDummyInterface *, DjinniWrapperDummyInterface *)) {
    s_py_callback_nullity_interface_non_null_parameters = ptr;
}

void nullity_interface_add_callback_non_null_return(DjinniWrapperDummyInterface *(* ptr)(DjinniObjectHandle * , bool)) {
    s_py_callback_nullity_interface_non_null_return = ptr;
}

void nullity_interface_add_callback_nullable_parameters(void(* ptr)(DjinniObjectHandle * , DjinniWrapperDummyInterface *, DjinniWrapperDummyInterface *)) {
    s_py_callback_nullity_interface_nullable_parameters = ptr;
}

void nullity_interface_add_callback_nullable_return(DjinniWrapperDummyInterface *(* ptr)(DjinniObjectHandle * , bool)) {
    s_py_callback_nullity_interface_nullable_return = ptr;
}

void nullity_interface_add_callback___delete(void(* ptr)(DjinniObjectHandle * )) {
    s_py_callback_nullity_interface___delete = ptr;
}

void NullityInterfacePythonProxy::non_null_parameters(const std::shared_ptr<::testsuite::DummyInterface> & p1, const std::shared_ptr<::testsuite::DummyInterface> & p2) {
    auto _p1 = DjinniWrapperDummyInterface::wrap(std::move(p1));
    auto _p2 = DjinniWrapperDummyInterface::wrap(std::move(p2));
    s_py_callback_nullity_interface_non_null_parameters(m_py_obj_handle, _p1.release(), _p2.release());
    djinni::cw_throw_if_pending();
}

std::shared_ptr<::testsuite::DummyInterface> NullityInterfacePythonProxy::non_null_return(bool should_return_null) {
    auto _ret = DjinniWrapperDummyInterface::get(std::move(djinni::Handle<DjinniWrapperDummyInterface>(s_py_callback_nullity_interface_non_null_return(m_py_obj_handle, should_return_null), dummy_interface___wrapper_dec_ref)));
    djinni::cw_throw_if_pending();
    return _ret;
}

void NullityInterfacePythonProxy::nullable_parameters(const std::shared_ptr<::testsuite::DummyInterface> & p1, const std::shared_ptr<::testsuite::DummyInterface> & p2) {
    auto _p1 = DjinniWrapperDummyInterface::wrap(std::move(p1));
    auto _p2 = DjinniWrapperDummyInterface::wrap(std::move(p2));
    s_py_callback_nullity_interface_nullable_parameters(m_py_obj_handle, _p1.release(), _p2.release());
    djinni::cw_throw_if_pending();
}

std::shared_ptr<::testsuite::DummyInterface> NullityInterfacePythonProxy::nullable_return(bool should_return_null) {
    auto _ret = DjinniWrapperDummyInterface::get(std::move(djinni::Handle<DjinniWrapperDummyInterface>(s_py_callback_nullity_interface_nullable_return(m_py_obj_handle, should_return_null), dummy_interface___wrapper_dec_ref)));
    djinni::cw_throw_if_pending();
    return _ret;
}
void cw__nullity_interface_non_null_parameters(DjinniWrapperNullityInterface * djinni_this, DjinniWrapperDummyInterface * p1, DjinniWrapperDummyInterface * p2) {
    djinni::Handle<DjinniWrapperDummyInterface> _p1(p1, dummy_interface___wrapper_dec_ref);
    djinni::Handle<DjinniWrapperDummyInterface> _p2(p2, dummy_interface___wrapper_dec_ref);
    try { 
        djinni_this->wrapped_obj->non_null_parameters(DjinniWrapperDummyInterface::get(std::move(_p1)), DjinniWrapperDummyInterface::get(std::move(_p2)));
    } CW_TRANSLATE_EXCEPTIONS_RETURN();
}

DjinniWrapperDummyInterface * cw__nullity_interface_non_null_return(DjinniWrapperNullityInterface * djinni_this, bool should_return_null) {
    try { 
        return DjinniWrapperDummyInterface::wrap(std::move(djinni_this->wrapped_obj->non_null_return(should_return_null))).release();
    } CW_TRANSLATE_EXCEPTIONS_RETURN(0);
}

void cw__nullity_interface_nullable_parameters(DjinniWrapperNullityInterface * djinni_this, DjinniWrapperDummyInterface * p1, DjinniWrapperDummyInterface * p2) {
    djinni::Handle<DjinniWrapperDummyInterface> _p1(p1, dummy_interface___wrapper_dec_ref);
    djinni::Handle<DjinniWrapperDummyInterface> _p2(p2, dummy_interface___wrapper_dec_ref);
    try { 
        djinni_this->wrapped_obj->nullable_parameters(DjinniWrapperDummyInterface::get(std::move(_p1)), DjinniWrapperDummyInterface::get(std::move(_p2)));
    } CW_TRANSLATE_EXCEPTIONS_RETURN();
}

DjinniWrapperDummyInterface * cw__nullity_interface_nullable_return(DjinniWrapperNullityInterface * djinni_this, bool should_return_null) {
    try { 
        return DjinniWrapperDummyInterface::wrap(std::move(djinni_this->wrapped_obj->nullable_return(should_return_null))).release();
    } CW_TRANSLATE_EXCEPTIONS_RETURN(0);
}
