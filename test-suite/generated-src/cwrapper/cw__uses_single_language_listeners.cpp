// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from listeners.djinni

#include <iostream> // for debugging
#include <cassert>
#include "wrapper_marshal.hpp"
#include "uses_single_language_listeners.hpp"

#include "cw__java_only_listener.hpp"
#include "cw__objc_only_listener.hpp"
#include "cw__py_only_listener.hpp"
#include "cw__uses_single_language_listeners.hpp"

static void(*s_py_callback_uses_single_language_listeners_callForObjC)(DjinniObjectHandle * , DjinniWrapperObjcOnlyListener *);
static void(*s_py_callback_uses_single_language_listeners_callForJava)(DjinniObjectHandle * , DjinniWrapperJavaOnlyListener *);
static void(*s_py_callback_uses_single_language_listeners_callForPy)(DjinniObjectHandle * , DjinniWrapperPyOnlyListener *);
static void(*s_py_callback_uses_single_language_listeners___delete)(DjinniObjectHandle * );

std::shared_ptr<::testsuite::UsesSingleLanguageListeners> DjinniWrapperUsesSingleLanguageListeners::get(djinni::WrapperRef<DjinniWrapperUsesSingleLanguageListeners> dw) {
    if (dw) {
        return dw->wrapped_obj;
    }
    return nullptr;
}

void uses_single_language_listeners___delete(DjinniObjectHandle * dh) {
    s_py_callback_uses_single_language_listeners___delete(dh);
}
void uses_single_language_listeners___wrapper_add_ref(DjinniWrapperUsesSingleLanguageListeners * dh) {
    dh->ref_count.fetch_add(1);
}
void uses_single_language_listeners___wrapper_dec_ref(DjinniWrapperUsesSingleLanguageListeners * dh) {
    const size_t ref = dh->ref_count.fetch_sub(1);
    if (ref == 1) {// value before sub is returned
        delete dh;
    }
}
djinni::Handle<DjinniWrapperUsesSingleLanguageListeners> DjinniWrapperUsesSingleLanguageListeners::wrap(std::shared_ptr<::testsuite::UsesSingleLanguageListeners> obj) {
    if (obj)
        return djinni::Handle<DjinniWrapperUsesSingleLanguageListeners>(new DjinniWrapperUsesSingleLanguageListeners{ std::move(obj) }, uses_single_language_listeners___wrapper_dec_ref);
    return nullptr;
}

DjinniWrapperUsesSingleLanguageListeners *  make_proxy_object_from_handle_cw__uses_single_language_listeners(DjinniObjectHandle * c_ptr) {
    return new DjinniWrapperUsesSingleLanguageListeners{std::make_shared<UsesSingleLanguageListenersPythonProxy>(c_ptr)};
}

DjinniObjectHandle * get_handle_from_proxy_object_cw__uses_single_language_listeners(DjinniWrapperUsesSingleLanguageListeners * dw) {
    UsesSingleLanguageListenersPythonProxy * cast_ptr = dynamic_cast<UsesSingleLanguageListenersPythonProxy * >(dw->wrapped_obj.get());
    if (!cast_ptr) { return nullptr; }
    else return cast_ptr->get_m_py_obj_handle();
}

bool equal_handles_cw__uses_single_language_listeners(DjinniWrapperUsesSingleLanguageListeners * dw1, DjinniWrapperUsesSingleLanguageListeners * dw2) {
    return dw1->wrapped_obj == dw2->wrapped_obj;
}

DjinniObjectHandle * UsesSingleLanguageListenersPythonProxy::get_m_py_obj_handle() {
    return m_py_obj_handle;
}

UsesSingleLanguageListenersPythonProxy::UsesSingleLanguageListenersPythonProxy(DjinniObjectHandle * c_ptr) : m_py_obj_handle(c_ptr) {}

UsesSingleLanguageListenersPythonProxy::~UsesSingleLanguageListenersPythonProxy() {
    s_py_callback_uses_single_language_listeners___delete(m_py_obj_handle);
}

void uses_single_language_listeners_add_callback_callForObjC(void(* ptr)(DjinniObjectHandle * , DjinniWrapperObjcOnlyListener *)) {
    s_py_callback_uses_single_language_listeners_callForObjC = ptr;
}

void uses_single_language_listeners_add_callback_callForJava(void(* ptr)(DjinniObjectHandle * , DjinniWrapperJavaOnlyListener *)) {
    s_py_callback_uses_single_language_listeners_callForJava = ptr;
}

void uses_single_language_listeners_add_callback_callForPy(void(* ptr)(DjinniObjectHandle * , DjinniWrapperPyOnlyListener *)) {
    s_py_callback_uses_single_language_listeners_callForPy = ptr;
}

void uses_single_language_listeners_add_callback___delete(void(* ptr)(DjinniObjectHandle * )) {
    s_py_callback_uses_single_language_listeners___delete = ptr;
}

void UsesSingleLanguageListenersPythonProxy::callForObjC(const std::shared_ptr<::testsuite::ObjcOnlyListener> & l) {
    auto _l = DjinniWrapperObjcOnlyListener::wrap(std::move(l));
    s_py_callback_uses_single_language_listeners_callForObjC(m_py_obj_handle, _l.release());
    djinni::cw_throw_if_pending();
}

void UsesSingleLanguageListenersPythonProxy::callForJava(const std::shared_ptr<::testsuite::JavaOnlyListener> & l) {
    auto _l = DjinniWrapperJavaOnlyListener::wrap(std::move(l));
    s_py_callback_uses_single_language_listeners_callForJava(m_py_obj_handle, _l.release());
    djinni::cw_throw_if_pending();
}

void UsesSingleLanguageListenersPythonProxy::callForPy(const std::shared_ptr<::testsuite::PyOnlyListener> & l) {
    auto _l = DjinniWrapperPyOnlyListener::wrap(std::move(l));
    s_py_callback_uses_single_language_listeners_callForPy(m_py_obj_handle, _l.release());
    djinni::cw_throw_if_pending();
}
void cw__uses_single_language_listeners_callForObjC(DjinniWrapperUsesSingleLanguageListeners * djinni_this, DjinniWrapperObjcOnlyListener * l) {
    djinni::Handle<DjinniWrapperObjcOnlyListener> _l(l, objc_only_listener___wrapper_dec_ref);
    try {
        djinni_this->wrapped_obj->callForObjC(DjinniWrapperObjcOnlyListener::get(std::move(_l)));
    } CW_TRANSLATE_EXCEPTIONS_RETURN();
}

void cw__uses_single_language_listeners_callForJava(DjinniWrapperUsesSingleLanguageListeners * djinni_this, DjinniWrapperJavaOnlyListener * l) {
    djinni::Handle<DjinniWrapperJavaOnlyListener> _l(l, java_only_listener___wrapper_dec_ref);
    try {
        djinni_this->wrapped_obj->callForJava(DjinniWrapperJavaOnlyListener::get(std::move(_l)));
    } CW_TRANSLATE_EXCEPTIONS_RETURN();
}

void cw__uses_single_language_listeners_callForPy(DjinniWrapperUsesSingleLanguageListeners * djinni_this, DjinniWrapperPyOnlyListener * l) {
    djinni::Handle<DjinniWrapperPyOnlyListener> _l(l, py_only_listener___wrapper_dec_ref);
    try {
        djinni_this->wrapped_obj->callForPy(DjinniWrapperPyOnlyListener::get(std::move(_l)));
    } CW_TRANSLATE_EXCEPTIONS_RETURN();
}
